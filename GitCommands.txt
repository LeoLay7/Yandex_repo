mkdir <name> - создать каталог

touch <name> - создать файл

cd <directory_name> - перейти в директорию

ls - список файлов в директории

git init - инициализовать git

git --help - справка по командам

git status - информация по текущей ветке и состоянию отслеживаемой файловой системы

git add <filename> - сообщить гиту, что ему надо отслеживать этот файл

git add -A - добавить все файлы

git commit -m 'text' - закоммитить изменения

git config --global user.email "developer@yandex.ru"
git config --global user.name "Smart developer"  - зарегаться, если незареган

git log - история версий и коммитов
--all — показывать историю всех веток
--graph — показывать ветки в виде дерева
--oneline — не показывать комментарии к коммитам
--abbrev-commit — показывать сокращенные имена коммитов
git help log - полный список функций

git checkout -- <filename> - откатить файл к состоянию последнего коммита

git checkout <commit hash> - откатить всю систему к состоянию коммита, для этого используется его хэш

git checkout -b "<branchname>" - создать новую ветку и переключиться на нее

git checkout <имя ветки> - Переключаться между ветками

git rm --cached - удалить файл из отслеживаемых

Зафиксировать изменения git commit -a -m "Добавили восклицательные знаки в конце предложения".
Параметр -a указывает, что нужно зафиксировать изменения всех изменившихся файлов.
Вместо этого параметра можно просто перечислить имена
нужных файлов: git commit program.py -m "Добавили восклицательные знаки в program.py.".
Параметр -m задает комментарий к коммиту

cat <filename> - вывести текст файла


git diff <hash commit1> <hash commit2> - сравнить 2 комита

git diff <hash commit2> - сравнить текущий коммит из HEAD

git diff <branch1> <branch2> - сравнить версии из 2-х веток


git branch "<имя ветки>" - создать ветку, но не переключаться на нее

git branch - список веток в репозитории

git branch -d <имя ветки> - удалить ветку

!Обратите внимание, что создавая ветку любой из описанных выше команд,!
!мы получаем полную копию ветки, в которой находились в этот момент.!\


git merge <branchname> - соединить версии. В ветку, в которой мы находимся, заливается версия указанной в параметрах ветки

git remote add <repo name> https://github.com/user/git_lesson_repository.git

git remote - посмотреть список привязанных репозиториев

___________________________________________________________________________________|
git remote -v - просмотреть список привязанных репозиториев с ссылками             |
                                                                                   |
Удаленный репозиторий успешно добавился, но информация о нем отображается 2 раза:  |
                                                                                   |
1. Он добавлен как репозиторий для вытягивания (fetch) изменений                   |
1. И как репозиторий для сохранения удаленных изменений (push)                     |
___________________________________________________________________________________|

git push -u <имя удаленного репозитория> <имя локальной ветки> - загрузить изменения из локального репозитория в сетевой

git push <имя репозитория> --all - запушить все ветки в сетевой репозиторий

git clone <URL репозитория> - склонировать репозиторий